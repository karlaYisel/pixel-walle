@page "/"
@using Core.Controller
@using Core.Utils.Error
@using Core.Utils
@using Core.Utils.ImageEditor
@using Core.AST
@using System.Threading
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime

<div class="ide-container">

    <div class="toolbar">
        <div class="toolbar-group">
            <button class="btn btn-primary" @onclick="CompileCode" disabled="@isRunning">
                <i class="fas fa-hammer"></i> Compile
            </button>
            <button class="btn btn-success" @onclick="RunCode" disabled="@(isRunning || hasErrors)">
                <i class="fas fa-play"></i> Execute
            </button>
            <button class="btn btn-danger" @onclick="StopExecution" disabled="@(!isRunning)">
                <i class="fas fa-stop"></i> Stop
            </button>
        </div>

        <div class="toolbar-group">
            <label>Canvas:</label>
            <input type="number" @bind="canvasWidth" placeholder="Width" min="1" max="10000" class="form-control canvas-input" oninput="if (this.value < 1) this.value = 1; if (this.value > 10000) this.value = 10000;" />
            <input type="number" @bind="canvasHeight" placeholder="Height" min="1" max="10000" class="form-control canvas-input" oninput="if (this.value < 1) this.value = 1; if (this.value > 10000) this.value = 10000;" />
            <button class="btn btn-secondary" @onclick="ResizeCanvas">
                <i class="fas fa-expand-arrows-alt"></i> Resize
            </button>
        </div>

        <div class="toolbar-group">
            <label>Brush:</label>
            <select @bind="selectedBrushType" class="form-select">
                @foreach (var brush in Enum.GetValues<BrushType>())
                {
                    <option value="@brush">@brush</option>
                }
            </select>
        </div>

        <div class="toolbar-group">
            <label>Color:</label>
            <select @bind="selectedColorType" class="form-select">
                @foreach (var color in Enum.GetValues<ColorType>())
                {
                    <option value="@color">@color</option>
                }
            </select>
        </div>

        <div class="toolbar-group">
            <label>Animation:</label>
            <select @bind="selectedAnimationType" class="form-select">
                @foreach (var animation in Enum.GetValues<AnimationType>())
                {
                    <option value="@animation">@animation</option>
                }
            </select>
        </div>
    </div>

    <div class="main-content">
        <div class="file-panel">
            <div class="file-header">
                <h6>Files</h6>
                <button class="btn btn-sm btn-outline-primary" @onclick="CreateNewScript">
                    <i class="fas fa-plus"></i> +
                </button>
            </div>

            <div class="file-list">
                <!-- Main file -->
                <div class="file-item main-file @(selectedFileIndex == -1 ? "selected" : "")"
                @onclick="() => SelectFile(-1)"
                @oncontextmenu="(e) => ShowContextMenu(e, -1)"
                @oncontextmenu:preventDefault="true">
                    <i class="fas fa-file-code"></i>
                    <span class="file-name">@(mainFile?.Name ?? "Without File")</span>
                    @if (mainFile?.HasUnsavedChanges == true)
                    {
                        <span class="unsaved-indicator">●</span>
                    }
                </div>

                <!-- Script files -->
                @for (int i = 0; i < scriptFiles.Count; i++)
                {
                    var index = i;
                    var file = scriptFiles[i];
                    <div class="file-item @(selectedFileIndex == index ? "selected" : "")"
                    @onclick="() => SelectFile(index)"
                    @oncontextmenu="(e) => ShowContextMenu(e, index)"
                    @oncontextmenu:preventDefault="true">
                        <i class="fas fa-file-alt"></i>
                        <span class="file-name">@file.Name</span>
                        @if (file.HasUnsavedChanges)
                        {
                            <span class="unsaved-indicator">●</span>
                        }
                    </div>
                }
            </div>
        </div>
        <div class="editor-canvas-container">
            <div class="editor-container">
                <div class="editor-header">
                    <span>@(GetCurrentFileName())</span>
                    <div class="editor-actions">
                        <button class="btn btn-sm btn-outline-secondary" @onclick="SaveCurrentFile">
                            <i class="fas fa-save"></i> Save
                        </button>
                        <button class="btn btn-sm btn-outline-secondary" @onclick="SaveAllFiles">
                            <i class="fas fa-save"></i> Save All
                        </button>
                    </div>
                </div>

                <div class="code-editor">
                    <div id="monaco-editor-container" style="width: 100%; height: 100%;"></div>
                </div>
            </div>

            <div class="canvas-container">
                <div class="canvas-header">
                    <span>Canvas</span>
                    <div class="canvas-actions">
                        <button class="btn btn-sm btn-outline-secondary" @onclick="DownloadCanvas">
                            <i class="fas fa-download"></i> Download
                        </button>
                        <button class="btn btn-sm btn-outline-secondary" @onclick="LoadCanvas">
                            <i class="fas fa-upload"></i> Load
                        </button>
                        <button class="btn btn-sm btn-outline-secondary" @onclick="ClearCanvas">
                            <i class="fas fa-eraser"></i> Clean
                        </button>
                    </div>
                </div>

                <div class="canvas-viewport">
                    <img style="object-fit: contain; width: 100%; max-width: 100%; height: auto; max-height: 100%; text-align: center; " src="@originalImageDataUrl" alt="Canvas Imagen" />
                </div>
            </div>
        </div>
    </div>

    <div class="console-container @(showConsole ? "expanded" : "collapsed")">
        <div class="console-header" @onclick="ToggleConsole">
            <i class="fas @(showConsole ? "fa-chevron-down" : "fa-chevron-up")"></i>
            <span>Errors: (@compilingErrors.Count errores)</span>
        </div>

        @if (showConsole)
        {
            <div class="console-content">
                @if (compilingErrors.Any())
                {
                    @foreach (var error in compilingErrors)
                    {
                        <div class="error-item">
                            <i class="fas fa-exclamation-circle error-icon"></i>
                            <span class="error-file">@error.Location.File</span>
                            <span class="error-line">[Line @error.Location.Line , Column @error.Location.Column]</span>
                            <span class="error-message">@error.Code.ToString() @error.Argument</span>
                        </div>
                    }
                }
                else
                {
                    <div class="no-errors">
                        <i class="fas fa-check-circle"></i>
                        No issues found
                    </div>
                }
            </div>
        }
    </div>

</div>

@if (showContextMenu)
{
    <div class="context-menu" style="left: @(contextMenuX + "px"); top: @(contextMenuY + "px")">
        @if (contextMenuFileIndex == -1)
        {
            <div class="context-item" @onclick="CreateNewMainFile">
                <i class="fas fa-file-plus"></i> New Main File
            </div>
            <div class="context-item" @onclick="ReplaceMainFileFromDisk">
                <i class="fas fa-folder-open"></i> Load Main File
            </div>
        }
        else
        {
            <div class="context-item" @onclick="CreateNewScript">
                <i class="fas fa-file-plus"></i> New Script
            </div>
            <div class="context-item" @onclick="ReplaceScriptFromDisk">
                <i class="fas fa-folder-open"></i> Load Script
            </div>
            <div class="context-item" @onclick="() => RemoveScript(contextMenuFileIndex)">
                <i class="fas fa-trash"></i> Remove Script
            </div>
        }
        <div class="context-item" @onclick="() => SaveFile(contextMenuFileIndex)">
            <i class="fas fa-save"></i> Save
        </div>
    </div>
}

@if (executionError is not null)
{
    <div class="modal fade show" style="display: block; background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Execution Error</h5>
                </div>
                <div class="modal-body">
                    @executionError.Code @executionError.Argument
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" @onclick="CloseExecutionError">Close</button>
                </div>
            </div>
        </div>
    </div>
}
